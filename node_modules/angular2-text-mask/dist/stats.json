{"errors":["angular2TextMask.js from UglifyJs\nSyntaxError: Unexpected token: punc ({) [./angular2/src/angular2TextMask.ts:1,7]","angular2TextMask.js from UglifyJs\nSyntaxError: Unexpected token: punc ({) [./angular2/src/angular2TextMask.ts:1,7]","[default] \nCannot find type definition file for 'node'.","[default] /Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts:27:4 \nObject literal's property 'pipe' implicitly has an 'any' type.","[default] /Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts:29:4 \nObject literal's property 'onReject' implicitly has an 'any' type.","[default] /Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts:30:4 \nObject literal's property 'onAccept' implicitly has an 'any' type.","[default] /Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts:62:10 \nParameter '$event' implicitly has an 'any' type."],"warnings":[],"version":"1.13.2","hash":"fe6103d88f2b89b865f2","publicPath":"","assetsByChunkName":{"main":"angular2TextMask.js"},"assets":[{"name":"angular2/src/angular2TextMask.d.ts","size":922,"chunks":[],"chunkNames":[]},{"name":"angular2TextMask.js","size":5459,"chunks":[0],"chunkNames":["main"],"emitted":true},{"name":"stats.json","size":0,"chunks":[],"chunkNames":[]}],"chunks":[{"id":0,"rendered":true,"initial":true,"entry":true,"extraAsync":false,"size":3511,"names":["main"],"files":["angular2TextMask.js"],"hash":"98f57163ce36333e0dab","parents":[],"modules":[{"id":0,"identifier":"/Users/mk/Code/github/msafi/text-mask/node_modules/awesome-typescript-loader/dist.babel/entry.js?{\"tsconfig\":\"./angular2/tsconfig.json\",\"declaration\":true}!/Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts","name":"./angular2/src/angular2TextMask.ts","index":0,"index2":0,"size":3511,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":["angular2/src/angular2TextMask.d.ts"],"issuer":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"source":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Directive, ElementRef, forwardRef, Input, NgModule, Renderer } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport createTextMaskInputElement from '../../core/src/createTextMaskInputElement';\r\nlet MaskedInputDirective_1 = class MaskedInputDirective {\r\n    constructor(renderer, element) {\r\n        this.renderer = renderer;\r\n        this.element = element;\r\n        this.textMaskConfig = {\r\n            mask: '',\r\n            guide: true,\r\n            placeholderChar: '_',\r\n            pipe: undefined,\r\n            keepCharPositions: false,\r\n            onReject: undefined,\r\n            onAccept: undefined\r\n        };\r\n        this._onTouched = () => { };\r\n        this._onChange = (_) => { };\r\n    }\r\n    ngOnInit() {\r\n        if (this.element.nativeElement.tagName === 'INPUT') {\r\n            this.inputElement = this.element.nativeElement;\r\n        }\r\n        else {\r\n            this.inputElement = this.element.nativeElement.getElementsByTagName('INPUT')[0];\r\n        }\r\n        this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));\r\n    }\r\n    writeValue(value) {\r\n        if (this.textMaskInputElement !== undefined) {\r\n            this.textMaskInputElement.update(value);\r\n        }\r\n    }\r\n    registerOnChange(fn) { this._onChange = fn; }\r\n    registerOnTouched(fn) { this._onTouched = fn; }\r\n    onInput($event) {\r\n        this.textMaskInputElement.update($event.target.value);\r\n        this._onChange($event.target.value);\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.renderer.setElementProperty(this.element.nativeElement, 'disabled', isDisabled);\r\n    }\r\n};\r\nexport let MaskedInputDirective = MaskedInputDirective_1;\r\n__decorate([\r\n    Input('textMask'), \r\n    __metadata('design:type', Object)\r\n], MaskedInputDirective.prototype, \"textMaskConfig\", void 0);\r\nMaskedInputDirective = MaskedInputDirective_1 = __decorate([\r\n    Directive({\r\n        host: {\r\n            '(input)': 'onInput($event)',\r\n            '(blur)': '_onTouched()'\r\n        },\r\n        selector: '[textMask]',\r\n        providers: [{\r\n                provide: NG_VALUE_ACCESSOR,\r\n                useExisting: forwardRef(() => MaskedInputDirective),\r\n                multi: true\r\n            }]\r\n    }), \r\n    __metadata('design:paramtypes', [Renderer, ElementRef])\r\n], MaskedInputDirective);\r\nexport let TextMaskModule = class TextMaskModule {\r\n};\r\nTextMaskModule = __decorate([\r\n    NgModule({\r\n        declarations: [MaskedInputDirective],\r\n        exports: [MaskedInputDirective],\r\n        imports: [CommonModule]\r\n    }), \r\n    __metadata('design:paramtypes', [])\r\n], TextMaskModule);\r\n"}],"filteredModules":0,"origins":[{"moduleId":0,"module":"/Users/mk/Code/github/msafi/text-mask/node_modules/awesome-typescript-loader/dist.babel/entry.js?{\"tsconfig\":\"./angular2/tsconfig.json\",\"declaration\":true}!/Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts","moduleIdentifier":"/Users/mk/Code/github/msafi/text-mask/node_modules/awesome-typescript-loader/dist.babel/entry.js?{\"tsconfig\":\"./angular2/tsconfig.json\",\"declaration\":true}!/Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts","moduleName":"./angular2/src/angular2TextMask.ts","loc":"","name":"main","reasons":[]}]}],"modules":[{"id":0,"identifier":"/Users/mk/Code/github/msafi/text-mask/node_modules/awesome-typescript-loader/dist.babel/entry.js?{\"tsconfig\":\"./angular2/tsconfig.json\",\"declaration\":true}!/Users/mk/Code/github/msafi/text-mask/angular2/src/angular2TextMask.ts","name":"./angular2/src/angular2TextMask.ts","index":0,"index2":0,"size":3511,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":["angular2/src/angular2TextMask.d.ts"],"issuer":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"source":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Directive, ElementRef, forwardRef, Input, NgModule, Renderer } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport createTextMaskInputElement from '../../core/src/createTextMaskInputElement';\r\nlet MaskedInputDirective_1 = class MaskedInputDirective {\r\n    constructor(renderer, element) {\r\n        this.renderer = renderer;\r\n        this.element = element;\r\n        this.textMaskConfig = {\r\n            mask: '',\r\n            guide: true,\r\n            placeholderChar: '_',\r\n            pipe: undefined,\r\n            keepCharPositions: false,\r\n            onReject: undefined,\r\n            onAccept: undefined\r\n        };\r\n        this._onTouched = () => { };\r\n        this._onChange = (_) => { };\r\n    }\r\n    ngOnInit() {\r\n        if (this.element.nativeElement.tagName === 'INPUT') {\r\n            this.inputElement = this.element.nativeElement;\r\n        }\r\n        else {\r\n            this.inputElement = this.element.nativeElement.getElementsByTagName('INPUT')[0];\r\n        }\r\n        this.textMaskInputElement = createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));\r\n    }\r\n    writeValue(value) {\r\n        if (this.textMaskInputElement !== undefined) {\r\n            this.textMaskInputElement.update(value);\r\n        }\r\n    }\r\n    registerOnChange(fn) { this._onChange = fn; }\r\n    registerOnTouched(fn) { this._onTouched = fn; }\r\n    onInput($event) {\r\n        this.textMaskInputElement.update($event.target.value);\r\n        this._onChange($event.target.value);\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.renderer.setElementProperty(this.element.nativeElement, 'disabled', isDisabled);\r\n    }\r\n};\r\nexport let MaskedInputDirective = MaskedInputDirective_1;\r\n__decorate([\r\n    Input('textMask'), \r\n    __metadata('design:type', Object)\r\n], MaskedInputDirective.prototype, \"textMaskConfig\", void 0);\r\nMaskedInputDirective = MaskedInputDirective_1 = __decorate([\r\n    Directive({\r\n        host: {\r\n            '(input)': 'onInput($event)',\r\n            '(blur)': '_onTouched()'\r\n        },\r\n        selector: '[textMask]',\r\n        providers: [{\r\n                provide: NG_VALUE_ACCESSOR,\r\n                useExisting: forwardRef(() => MaskedInputDirective),\r\n                multi: true\r\n            }]\r\n    }), \r\n    __metadata('design:paramtypes', [Renderer, ElementRef])\r\n], MaskedInputDirective);\r\nexport let TextMaskModule = class TextMaskModule {\r\n};\r\nTextMaskModule = __decorate([\r\n    NgModule({\r\n        declarations: [MaskedInputDirective],\r\n        exports: [MaskedInputDirective],\r\n        imports: [CommonModule]\r\n    }), \r\n    __metadata('design:paramtypes', [])\r\n], TextMaskModule);\r\n"}],"filteredModules":0,"children":[]}